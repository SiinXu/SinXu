{"pages":[],"posts":[{"title":"01 CS | 03 计算机组成 | 10 控制单元","text":"通常控制器的设计分为组合逻辑设计和微程序设计两大类，相对应的控制器结构就有布线逻辑式和存储逻辑式；组合逻辑控制器：以使用最少原件和取得最高操作速度为设计目标，用产生专门固定时序控制信号的组合逻辑电路设计的控制器；微程序控制器：用存储逻辑替代组合逻辑，用类似程序设计的方法设计的控制器；微命令：打开或关闭控制之门的控制命令；微操作：由微命令控制的打开或者关闭控制门的操作；微指令：若干微命令的组合，能产生一组控制信号，控制执行相应一组微操作的指令。微周期：取出并执行一条微指令所需的时间；控制存储器：用于存放全部的指令的所有微程序的存储器。微程序存放在控制器存储器中；微命令的组合与编码方式有4种：直接译码方式、字段直接编码方式、字段间接编码方式、混合编码方式；字段直接编码方式中一个字段在任一时刻最多能同时提供1个微命令；微指令的格式有：水平型、垂直型；微指令寄存器：存放由控制存储器独处的一条微指令信息的寄存器；微指令的执行方式有：顺序执行的方式、重叠执行的方式；在微程序控制器中，一条机器指令对应一个微程序，N跳机器指令对应N+3个微程序。","link":"/2016/06/22/01-CS-03-计算机组成-10-控制单元/"},{"title":"","text":"title: 01 CS | 06 iOS开发 | 01 Swift | swift的基本语法date: 2017-03-18 01:03:350","link":"/2019/03/18/01-CS-06-iOS开发-01-Swift学习手册/"},{"title":"01 CS | 01 操作系统 |  02 进程管理  | 01 进程与线程","text":"1.1 进程的概念进程是一个活动的实体，除了指令代码，进程通常还包括进程堆段、栈段(包含临时 数据，如方法参数、返回地址和局部变量)和数据段(包含常量或全局变量等)。 进程是程序在数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。 定义：进程是并发程序的动态运行，是多道程序系统中程序的动态运行过程。 特征**动态性:** 动态性是进程最基本的特征。 即进程由创建而产生，由调度而运行，因得不 资源而暂停运行，以及由撤销而消亡。 **独立性：** 进程是自我封闭的，有共享代码段的进程互相之间也是独立的。 **异步性:** 进程按各自独立的、不可预知的速度向前推进，导致程序具有不可再现性。 因此，在操作系统中，必须采取某种措施来保证各程序之间能协调运行。 **结构性:** 由程序代码(段)、数据(段)和进程控制块组成。 1.2 进程的状态与转换1.进程的基本状态包括有以下几种(三状态模型):运行状态(Running): 进程占用处理机正在运行其程序。单处理机系统中只能有一个 进程处于运行状态，多处理机系统中可能有多个进程处于运行状态。阻塞状态(Blocked): 也叫等待或睡眠状态，是进程由于等待某种事件的发生而处于 暂停运行的状态。如进程因等待输入/输出的完成、等待数据到达、等待缓冲空间等。 就绪状态(Ready): 进程已分配到除处理机以外的所有必要资源，具备了运行的条件， 可能会有多个进程处于就绪状态，排成就绪队列。图 1 说明了三状态进程模型及其转换。 图 1 三状态进程模型 2.进程状态的转换(1)就绪状态到运行状态: 调度程序为就绪状态的进程分配处理机后，进入运行状态。 (2)运行状态到阻塞状态: 正在运行的进程因需要等待某事件而无法运行，让出处理机。 (3)阻塞状态到就绪状态: 进程所等待的事件发生了，进程就从阻塞状态进入就绪状态。(4)运行状态到就绪状态: 正在运行的进程因时间片用完而被暂停运行;或者在可抢先 式调度方式中，一个优先级高的进程到来后，正在运行的优先级低的进程被强制撤下处理 机，转换为就绪状态。 1.3 进程控制进程原语 所谓原语即原子操作，要么全做，要么不做，一般是通过屏蔽中断来完成的。(1)进程创建。(2)进程撤销。(3)进程阻塞。(4)进程唤醒。(5)进程挂起。(6)进程激活。 1.4 进程组织进程实体程序:描述进程所要完成的功能，特指二进制的指令代码。数据集合:程序运行所需要的数据结构。包括常数，变量，堆，数据栈等。进程控制块:进程控制块包含了进程的描述信息、控制信息和资源信息。进程控制块(PCB)PCB 是保存进程状态和进程控制的标识，也是进程存在的唯一标识(也称进程表 PT)。创建进程则产生 PCB，撤销进程则系统就要回收 PCB。 1.5 进程通信进程间的信息交换工作称为进程间的通信。P、V 操作称为低级通信。高级通信是指进 程之间以较高的效率传送大量数据的通信方式。高级通信方式可分为三大类:共享内存、 消息传递以及管道机制。 1.6 线程概念与多线程模型1.线程的发明线程是进程中的一个实体，它是操作系统进行独立调度和分派的基本单位，但不是资 源分配的基本单位。线程自己不拥有系统资源，只拥有在运行中必不可少的资源，它同样 有就绪、阻塞和运行三种基本状态。并且它与同属一个进程的其他线程共享本进程所拥有 的全部资源(内存、文件以及设备)。 2.线程实现方式内核线程: 由操作系统根据内部需求进行创建和撤销，内核线程依赖于操作系统内核 的运行，因此操作系统知道内核线程的存在。也可以被用户所调用。用户线程: 与操作系统内核无关，用户程序利用操作系统提供的线程库来编写形成。它的创建、同步、调度和管理等诸多工作均由用户来实现。调度由用户编写的应用程序内部进行。但是由于操作系统不知道用户线程的存在，所以用户线程一旦因各种原因而阻塞，则其所在的整个进程也会阻塞。操作系统仅把处理机时间配额分配给进程，所以用户多线程时每个线程共享一个进程的时间配额，运行会变慢。","link":"/2016/03/09/技术/01|操作系统/01-技术-01-操作系统-02-进程管理-01-进程与线程/"},{"title":"01 CS  | 01 操作系统 |  05 输入输出(/O)管理  | 01   I/O管理概述","text":"1.1 I/O控制方式 I/O 设备概念I/O 设备: 是指计算机系统中除控制器、运算器(中央处理机)和内存以外的所有设备， 通常也称为外部设备。I/O 操作:是内存与外设的介质之间的数据传输操作。 I/O 设备分类(1)按交互对象分类: 人机交互设备等。(2)按交互方向分类: 输入输出设备等。(3)按外设特性分类: 块传输设备或字符传输设备等。 I/O 管理目标设备管理的功能是按照 I/O 子系统的结构和设备类型指定分配和使用设备的策略。 设备管理的目标是:提高效率;方便使用;方便控制。 I/O 应用接口提供设备使用的用户接口: 命令接口和编程接口。 设备分配和释放: 使用设备前，需要分配设备和相应的通道、控制器。设备的访问和控制: 包括并发访问和差错处理。I/O 缓冲和调度: 目标是提高 I/O 访问效率。 I/O 接口控制方式 设备管理的主要任务之一是控制设备和内存或处理机之间的数据传送，外围设备和内 存之间的 I/O 控制方式有四种(1)程序访问控制方式(2)中断控制方法(3)DMA 方式(4)通道方式 5.1.2 I/O软件层次结构1.I/O 软件的目标(1)设备独立性。(2)统一命名。 I/O 软件层次结构I/O 软件中，较低的层处理与硬件有关的细节，并将硬件的特征与较高的层隔离;而较 高的层则向用户提供一个友好的、清晰而规整的 I/O 接口。一般的 I/O 软件结构分为四层:中断处理程序，设备驱动程序，与设备无关的设备独立 层和用户层。中断处理程序: I/O 设备中断方式是控制输入输出设备和内存与 CPU 之间的数据传送 的主要方式。设备驱动程序: I/O 设备驱动程序是直接同硬件打交道的软件模块。 设备独立层:在 I/O 软件中，除了设备驱动程序以外，大部分软件是与设备无关的。 用户层软件: 用户使用设备的系统调用或 API。通常的 I/O 系统调用由库过程实现。","link":"/2016/04/02/技术/01|操作系统/01-CS-01-操作系统-05-输入输出-O-管理-01-I-O管理概述/"},{"title":"01 CS  | 01 操作系统 |  04 文件管理  | 02 文件系统实现 & 03 磁盘组织与管理","text":"2 文件系统实现2.1 文件系统层次结构 文件系统的层次结构指明其调用结构。 4.2.2 目录实现1.线性列表2.散列表 4.2.3 文件实现文件的实现是依据文件的物理结构来实施的。文件的实现要使用多个磁盘和内存结构。不同的操作系统采用不同的方法。虽然这些结构因操作系统和文件系统而异，但还是有一 些通用规律。[image:685ABCD7-7605-4A0F-B4BF-48FDA63F1630-1171-000034D82910A771/page30image23961856.png] 3.磁盘组织与管理4.3.1 磁盘的结构图 4-1 磁盘结构 .3.2 磁盘调度算法读写一次磁盘所需的时间可分为以下几种:(1)设备等待: 设备或总线忙，需要等候。 (2)寻道时间: 将读/写磁头移动到相应的柱面所花费的时间。 (3)旋转延迟时间: 扇区转到磁头位置所需的时间。 (4)传输时间: 数据写入磁盘或从磁盘读出的时间。 常用的磁臂调度算法有:1.先来先服务(FCFS)调度 根据进程请求访问磁盘的时间顺序，先来先服务。 2.最短寻道时间优先(SSTF)调度 根据磁头的当前位置首先将请求队列中距磁头最短的请求为之服务。 3.扫描算法(SCAN)调度 也叫“电梯”算法，磁头固定从外向内然后从内向外逐柱面运动。如此往复。 4.循环扫描(C-SCAN)调度循环扫描算法，即磁头从盘面上的一端向另一端移动，遇到请求立即服务，返回是直 接快速移至起始端，而不服务于任何请求。5.察看(LOOK)调度通常磁头只移动到一个方向上最远的请求为之。接着马上回头，而不是继续到磁盘的 尽头。这种形式的 SCAN 和 C-SCAN 称为察看 LOOK 和循环察看 C-LOOK 调度，这是因为它们 在朝—个给定方向移动前会察看是否有请求。","link":"/2016/03/29/技术/01|操作系统/01-CS-01-操作系统-04-文件管理-02-文件系统实现-03-磁盘组织与管理/"},{"title":"01 CS  | 01 操作系统 |  05 输入输出(/O)管理  | 02   I/O核心子系统","text":"2.1 I/O调度概念操作系统开发人员通过为每个设备维护一个请求队列来实现调度。当一个应用程序运 行阻塞 I/O 系统调用时，该请求就加到相应设备的队列上。 5.2.2 高速缓存与缓冲区1.高速缓存高速缓存是可以保留数据拷贝的高速内存。 2.缓冲区缓冲区是用来保存在两设备之间或在设备和应用程序之间所传输数据的内存区域。缓冲技术可分为:单缓冲:在设备和处理机之间只设置一个缓冲区，由输入设备和输出设备公用。 双缓冲: 为输入和输出设备分配两个缓冲区，两个缓冲区交替使用。循环缓冲: 为 I/O 设备分别设置多个缓冲区，一部分专门用于输入，另一部分专门用 于输出。 缓冲池:将多个缓冲区合并在一起构成公用缓冲池进行统一管理，池中的缓冲区可供 多个进程共享。 2.3 设备分配与回收1.设备分配概述 设备分配的任务是按照一定的策略请求设备的进程分配合适的设备及相关的硬件。 分为独占型设备、共享型设备和虚拟型设备三种。 2.设备分配用数据结构 设备的分配和管理是通过数据结构来进行的，通过它来描述系统的配置， I/O 设备的状态特性及当前的使用情况。比较重要的数据结构有:(1)系统设备表 SDT:整个系统一张系统设备表。(2)设备控制表 DCT:系统为每一台物理设备配置一张 DCT。(3)控制器控制表 COCT:系统为每一个控制器设置一张 COCT。(4)通道控制表 CHCT:只在通道控制方式的系统中存在，每个通道一张。 3.设备分配策略 (1)设备分配原则: 设备分配的总原则既要充分发挥设备的使用效率。又要避免造成进程死锁。 (2)设备的分配方式: 静态分配主要用于对独占设备的分配，它是在用户作业开始运 行之前由系统一次分配该作业所要求的全部设备、控制器和通道，直到该作业被撤销才释 放。动态分配是在进程运行过程中按需进行的，进程需要设备时，向系统提出请求，系统 按照事先规定的策略给进程分配所需要的设备、控制器和通道，用完之后立即释放。(3)设备的分配策略: 常用的动态设备分配策略有先请求先分配(FIFO)、优先级高 者先分配等。 5.2.4 假脱机技术(SPOOLing)SPOOLing 技术，即同时联机外围操作技术，又称假脱机技术，是指在多道程序环境下， 利用多道程序中的一道或两道程序来模拟脱机输入输出中的外围控制机的功能，以达到“脱 机”输入输出的目的。1.SPOOLing 系统的组成系统主要由以下三部分组成;(1)输入井和输出井:这是在磁盘上开辟的两个大存储空间。 (2)输入缓冲区和输出缓冲区:这是在内存中开辟的两个缓冲区。 (3)输入进程 SP1 和输出进程 SP0:这是内存中的两个进程。","link":"/2016/04/08/技术/01|操作系统/01-CS-01-操作系统-05-输入输出-O-管理-02-I-O核心子系统/"},{"title":"01 CS | 01 操作系统 |  02 进程管理  | 02 处理机调度","text":"2.1 调度的基本概念作业调度 （宏观调度或高级调度）对处于后备状态的作业进行选择，并建立相应的进程。一般在批处理系统中，大多配有作业调度，而在其它系统中，通常不需配置作业调 度。作业调度的运行频率较低，通常为几分钟一次。 进程调度指决定就绪队列中哪个进程将获得处理机，并实际将处理机分配给该进程的操作。 交换调度（中级调度）主要任务 是按照给定的原则和策略，将处于外存对换区中，且具备运行条件的就绪进程调入内存，或将处于内存就绪状态或内存阻塞状态的进程交换到外存对换区。 2.2 调度的时机、切换和过程1.引起进程调度的事件正在运行的进程运行完毕或发生某事件而不能再继续运行;运行中的进程因提出输入/输出请求而暂停运行;在进程通信或同步过程中运行了某种原语操作，如 P 操作等;在可抢先式调度中，有一个比当前进程优先级更高的进程进入就绪队列; 在时间片轮转法中，时间片用完。 2.调度队列在单处理机系统中，只有一个进程处于运行状态。3.分派程序(dispatcher) 进程调度算法只是决定哪一个进程将获得处理机，是策略的制定者，而将处理机分配 给该进程的具体操作是由分派程序完成的。分配程序是机制，是实际操作者，因此其运行 效率较高。这里充分体现了策略与机制分离的设计思想。 2.2.3 调度的基本准则 调度的基本准则包括: 处理机利用率: 尽可能让昂贵的处理机处于繁忙中。 吞吐量: 单位时间内所完成进程的数量尽量多。 周转时间: 从作业提交到作业完成所花费的时间。要让周转时间尽可能地小。 后备时间: 是指作业抵达系统后在外存等待进入内存的时间，越小越好。 等待时间: 是指在就绪队列中等待调度进入处理机的时间。 响应时间: 是指从提交请求到产生第一响应输出的时间。 2.2.4 调度方式1.不可抢先方式2.可抢先方式3.进程调度算法比较(1)先来先服务(FCFS)。(2)短作业或短进程优先(SJF&amp;SPF)。(3)高响应比优先调度(HRRN)算法。 响应比 Rp =(等待时间+预计运行时间)/ 预计运行时间 = 周转时间 / 预计运行时间(4)高优先级优先调度算法。分静态优先级和动态优先级。 (5)时间片轮转调度算法(RR)。(6)多级反馈队列调度算法。","link":"/2016/03/11/技术/01|操作系统/01-技术-01-操作系统-02-进程管理-02-处理机调度/"},{"title":"01 CS | 01 操作系统 |  02 进程管理  | 03 同步与互斥","text":"3.1 进程同步与互斥的基本概念基本概念在多道程序系统中，由于进程，各进程之间有两种形式的制约关系:(1)间接相互制约: 源于资源共享。(2)直接相互制约: 源于进程合作。 进程同步: 主要源于进程合作，为进程之间的直接制约关系。 进程互斥:主要源于资源共享，是进程之间的间接制约关系。 临界资源: 一次只允许一个进程使用的资源称为临界资源，如打印机、公共变量等。临界区: 在每个进程中，访问临界资源的那段程序称为临界区。 同步机制应遵循的准则同步机制应遵循下述四条准则:(1)空闲则进: 当临界区空闲时，进程可以立即进入，以便有效地利用临界资源。(2)遇忙等待: 当已有进程进入其临界区时，其它进程必须等待，以保证互斥。 (3)有限等待: 对要求进入的进程，应在有限的时间内使之进入，以免陷入“死等”。(4)让权等待: 对于等待的进程，它必须立即释放处理机，以避免进程忙等。 3.2 实现临界区互斥的基本方法1.用软件实现的同步互斥机制(1)算法一:单标志法(2)算法二:双标志法先检查(3)算法三:双标志法后检查(4)算法四:Peterson’s Algorithm 2.进程互斥的硬件方法(1)检测和设置(TS)指令(2)swap 指令(或 exchange 指令)该指令的作用是交换两个字(字节)的内容 3.3 信号量对信号量 S 进行 P 操作，记为 P(S)，处理过程如下12345678910111213—S.Q; //表示申请一个资源if (S.Q &lt; 0) //表示没有空闲资源{调用进程进入等待队列 S.Q;阻塞调用进程;}对信号量 S 进行 V 操作，记为 V(S)，处理过程如下++S.Q; //表示释放一个资源if (S.Q &lt;= 0) //表示有进程处于阻塞状态{从等待队列 S.Q 中取出一个进程 P;进程 P 进入就绪队列;} 3.4 管程一个管程定义了一个数据结构和能为并发进程所运行的一组操作，这组操作能同步进 程和改变管程中的数据。 管程由三部分组成: 局部于管程的共享数据说明; 对该数据结构进行操作的一组过程; 对局部于管程的数据设置初始值的语句。 3.5 经典的同步与互斥问题1.生产者-消费者问题用 C 语言和信号量机制描述生产者-消费者问题的程序如下:有界缓冲区的大小为 100。123456789101112131415161718192021222324252627282930#define N 100 //有界缓冲区大小typedef int semaphore; //定义信号量semaphore mutex = 1; //临界区互斥信号量semaphore empty = N; //空闲缓冲区semaphore full = 0; //缓冲区初始化为空void producer(void){ int item; //局部变量while(1){item = produce_item(); //生产数据P(empty);//获取空数据槽P(mutex); //获得进入临界区的信号量insert_item(item); //将数据放入缓冲池V(mutex);//释放互斥量V(full); //数据量加一}}void consumer(void){int item; //局部变量while(1){P(full); //获取数据槽P(mutex);//获得进入临界区的信号量item = remove_item(); //将数据从缓冲池读出V(mutex);//释放互斥量V(empty);//数据量减一，即空槽加一consume_item(item); //消费数据}} 2.读者-写者问题设置互斥信号量 wmutex 表示写者间、读者和写者间互斥，用 readcount 变量来记录读 者数，由于 readcount 是读者间共享变量，属于临界资源，它也需互斥，为此，又增设互 斥信号量 rmutex。程序如下:1234567891011121314151617181920212223242526272829303132typedef int semaphore; //定义信号量semaphore rmutex = 1; //读者计数器的互斥量semaphore wmutex = 1; //写-写，读-写互斥量int readcount = 0; //读者计数器void reader(void)//读者进程{While (1) //进程被调度{ P(rmutex); //取得读者计数器的互斥量readcount = readcount + 1;//进来一个读者，读者数量加一if (readcount == 1) P(wmutex); //如果是第一个读者，取得读-写互斥量V(rmutex);//释放读者计数器的互斥量read_data_base();//读数据P(rmutex);//读者读完数据要离开，先取得读者计数器的互斥量readcount = readcount – 1; //读者数量减一if(readcount == 0) V(wmutex); //如果是最后一个离开的读者，释放读-写互斥量V(rmutex); //释放读者计数器的互斥量use_dataread(); //读者使用数据}}void writer(void) //写者进程{While (1) //进程得到调度{think_up_data();//写者产生数据 P(wmutex); //获得写-写，读-写操作互斥量write_data_base(); //写入数据库V(wmutex); //释放写-写，读-写操作互斥量}} 3.哲学家进餐问题解决办法 (1)至多只允许四个哲学家同时进餐，以保证至少有一个哲学家可以获得二只筷子:123456789101112131415typedef int semaphore; //定义信号量semaphore chopstick[5]={1，1，1，1，1};//初始化信号量semaphore eating = 4; //仅允许四个哲学家可以进餐void philosopher(int i) //第 i 个哲学家的程序{while(1){ thinking();//工作之一 P(eating);//请求进餐，若是第五个则先挨饿 P(chopstick[i]); //请求左手边的筷子P(chopstick[(i+1)%5]);//请求右手边的筷子eating(); //进餐V(chopstick[(i+1)%5]); //释放右手边的筷子V(chopstick[i]); //释放左手边的筷子V(eating); //释放信号量给其他挨饿的哲学家}} (2)另一种解决方法，仅当哲学家的左、右两支筷子均可用时，才允许他拿起筷子进餐。123456789101112131415typedef int semaphore; //定义信号量 semaphore chopstick[5]={1，1，1，1，1};//初始化信号量semaphore mutex = 1;//设置取筷子的信号量 void philosopher(int i)//第 i 个哲学家的程序 {while(1){ thinking();P(mutex); //在取筷子前获得互斥量P(chopstick[i]);P(chopstick[(i+1)]%5);V(mutex);//释放互斥量eating();V(chopstick[(i+1)]%5);V(chopstick[i]);}} (3)规定奇数号哲学家先拿起其左边筷子，然后再去拿右边筷子;而偶数号哲学家则 相反。程序代码如下:123456789101112131415161718192021typedef int semaphore; //定义信号量 semaphore chopstick[5]={1，1，1，1，1};//初始化信号量void philosopher(int i)//第 i 个哲学家的程序{while(1){ thinking();if(i%2 == 0) //偶数哲学家，先右后左{ P(chopstick[i+1]%5);P(chopstick[i]);eating();V(chopstick[i+1]%5);V(chopstick[i]);} else{ //奇数哲学家，先左后右P(chopstick[i]);P(chopstick[i+1]%5) ;eating();V(chopstick[i]);V(chopstick[i+1]%5);} }}","link":"/2016/03/14/技术/01|操作系统/01-技术-01-操作系统-02-进程管理-03-同步与互斥/"},{"title":"01 CS | 01 操作系统 |  02 进程管理  | 04 死锁","text":"4.1 死锁的概念死锁的概念系统中两个或两个以上的进程无限期地相互等待永远不会发生的条件，系统处于一种 停滞状态，这种情况称为死锁。 死锁产生的原因系统资源不足并不是产生死锁的原因，进程资源如果不足则进程就 不会被创建，只有在资源部分分配以后，剩余的资源不能满足某些个进程的请求，造成进程集无法推进的现象才是死锁。 (1)进程推进顺序不当和、(2)对互斥资源的分配不当。 产生死锁的四个必要条件互斥条件: 任一时刻只允许一个进程使用资源。非剥夺条件: 进程已经占用的资源，不会被强制剥夺。占用并请求条件: 进程占有部分资源，申请更多的资源，且不会释放已经占有的资源。循环等待: 请求资源的进程形成了循环。 4.2 死锁处理策略对死锁的处理，常用的方法有 忽略死锁、死锁的检测与恢复、死锁的避免和死锁的预防。 4.3 死锁忽略最典型的算法是 鸵鸟算法。 4.4 死锁检测和恢复1.资源分配图算法 2.资源矩阵法 3.死锁的解除与系统恢复恢复 死锁的解除与系统恢复恢复死锁常用的方法有如下几种:(1)资源剥夺法: 挂起某些死锁进程，并抢占它的资源。(2)进程撤销法: 通过撤销占有资源多的进程或代价量小的进程，以恢复死锁。(3)进程回退法: 设置还原点，让一个或多个进程回退到足以解除死锁的地步。(4)重新启动系统: 代价最大，一切从头开始。我们要尽量避免采用此方法。 4.5 死锁避免1.安全与不安全状态 某一时刻，系统能按某种顺序为每个进程分配其所需资源，使每个进程都能顺利地完 成，则称此时系统处于安全状态。反之，称之为不安全状态。2.银行家算法 银行家算法问题描述是:一个银行家把他的固定资金借给若干顾客，使这些顾客能满 足对资金的要求又能完成其交易，也使银行家可以收回全部的现金。只要不出现一个顾客 借走所有资金后还不够、还需要借贷，则银行家的资金应是安全的。 2.4.6 死锁预防所谓死锁预防，就是采用某种策略，限制并发进程对资源的请求，使系统在任何时刻 都不满足死锁的四个必要条件。 死锁预防主要是针对破坏四个必要条件进行的。破坏互斥条件: 某些设备可以通过 SPOOLING 系统将独享设备改造成为共享设备，以此 可以解决互斥问题，例如打印机。破坏非剥夺条件: 资源暂时释放策略，申请新的资源得不到满足则暂时释放已有的资 源。 破坏占用并请求条件： 一次性申请全部资源。 破坏循环等待条件: 资源有序申请，给资源编号，使用时按升序进行。","link":"/2016/03/18/技术/01|操作系统/01-技术-01-操作系统-02-进程管理-04死锁/"},{"title":"01 CS | 01 操作系统 |  03 进程管理  | 02 虚拟内存管理","text":"2.1 虚拟内存基本概念 局部性原理(1)时间局部性: 程序中的某条指令一旦运行，不久以后该指令可能再次运行。产生 时间局部性的典型原因是由于程序中存在着大量的循环操作。(2)空间局部性: 一旦程序访问了某个存储单元，不久以后其附近的存储单元也将枝 访问，其典型情况是程序顺序运行。 虚拟内存基于局部性原理，应用程序在运行之前并不必全部装入内存，仅需将当前运行到的那 部分程序和数据装入内存便可启动程序的运行，其余部分仍驻留在外存上。当要运行的指 令或访问的数据不在内存时，再由操作系统通过请求调入功能将它们调入内存，以使程序 能继续运行。如果此时内存已满，则还需通过置换功能，将内存中暂时不用的程序或数据 调至盘上，腾出足够的内存空间后，再将要访问的程序或数据调入内存，使程序继续运行。 实现虚拟内存的基础硬件基础: 一定容量的内存;大容量的外存;地址变换机构(含快表);缺页中断机构。软件基础: 虚实转换的数据结构(页表、段表等);中断服务处理程序;操作系统支持。 虚拟内存的主要特征(1)多次性。 (2)对换性。 (3)虚拟性。 2.2 请求分页管理方式请求分页的基本原理请求分页存储管理是在简单分页管理基础上发展起来的。请求页式管理在作业或进程 开始执行之前，不要求把作业或进程的程序段和数据段一次性地全部装入内存，而只把当 前需要的一部分页面装入内存，其它部分在作业执行过程中需要时，再从外存上调入内存。 页表的扩充(1)存在位(present/absent):表示该页是否在内存。(2)修改位(modified):该位为“0”时，在示访页面中的数据未被修改过。 (3)引用位(referenced):表示该页面在最近期间是否被访问引用过。(4)外存地址(swap area address):指出该页面在外存上的存放地址。(5)其它:如页面保护位(protection)，禁止缓存位(cache disabled)等。 地址变换请求分页的地址变换初始过程十分类似于简单分页系统的地址变换。 缺页中断处理当存在位为 0 时，表示该页不在内存，则必须确定它在外存中的存放地址。并把它从 外存中调入内存。若内存中没有空闲块时，首先按照某种策略选择某页进行淘汰。以腾出 空闲块供本次调入的页占用。这个过程也被称之为页面置换。若被选中淘汰的页面中的信 息修改过(修改位 = 1)还必须将其写回外存。如内存中有空闲块，则根据该页在外存的 地址，调入所需页面，并更新页表表项，最后恢复被中断的指令重新执行。 调页策略这是一个何时把页面装入内存的问题。如果出现缺页中断，表明企图对一个不存在于 内存的页面要求访问。显然，应该立即装入该页面。这种仅当需要时才调取页面的策略， 称为请求式调页，采用请求式调页策略的分页系统称为请求式分页;而把事先调取页面的 策略称为预调页。 2.3 页面置换算法1.随机淘汰算法在无法确定那些页被访问的概率较低时，随机地选择某个用户的页面并将其换出。 2.先进先出算法(FIFO)FIFO(first in first out)算法:总是选择驻留内存时间最长的页面进行淘汰。其理由是:最早调入内存的页面，其不再被使用的可能性最大。FIFO 算法忽略了一种现象的存在，就是在内存中停留时间最长的页往往也是经常被访问的页。将这些页淘汰，很可能刚置换出去，又请求调用该页，致使缺页中断较频繁，严 重降低内存的利用率。FIFO 的另一缺点是它有一种异常现象。称为 Belady 异常。 3.最佳置换算法(OPT) 最佳置换算法的基本思想是:从内存中移出永远不再需要的页面。4.最近最久未使用页面置换算法(LRU)这种算法的基本思想是，利用局部性原理，根据一个作业在执行过程中过去的页面访问历史来推测未来的行为。它认为过去一段时间里不曾被访问过的页面，在最近的将来可 能也不会再被访问。 5.最近没有使用页面置换算法(NRU)该算法只要求对应于每个存储块(页面)设置一个“引用位”和“修改位”。利用这二 位组织成四种状态，“引用位”:“修改位”=0:0;0:1;1:0;1:1。每次置换时，总取 最小值的页面置换，若相同则随机置换或先进先出置换。 6.时钟算法(CLOCK)时钟算法是将作业已调入内存的页面链成循环队列，使用页表中的“引用位”，用一个 指针指向循环队列中的下一个将被替换的页面。 3.2.4 页面分配策略1.固定分配局部置换策略2.可变分配全局置换策略3.可变分配局部置换策略 3.2.5 工作集工作集也称为驻留集，是某一个进程调入物理内存的页面的集合，这些页面是频繁地 被使用到的，因此长期驻留内存是有利于提高处理机的效率。 工作集模型是基于局部性原理假设的。 3.2.6 抖动如果分配给进程的存储块数量小于进程所需要的最小值，进程的运行将很频繁地产生 缺页中断。这种频率非常高的页面置换现象称之为抖动(也称为颠簸)。往往是刚被淘汰的页面马上被选中调页而进入内存。抖动将引起严重的系统性能下降。 防止抖动现象有多种办法，例如，采取局部替换策略，引入工作集算法，挂起或撤销若干进程等。","link":"/2016/03/21/技术/01|操作系统/01-技术-01-操作系统-03-进程管理-02虚拟内存管理/"},{"title":"01 CS | 01 操作系统 |  03 进程管理  | 01 内存管理基础","text":"3.1.1 内存管理概念 存储管理的功能(1)内存空间的分配与回收，包括内存的分配和共享。(2)地址转换: 内存管理配合硬件进行地址转换，把逻辑地址转换成物理地址。(3)内存空间的扩充: 借助于虚拟存储器或交换覆盖技术来达到扩充内存容量的目的。(4)存储保护: 为了避免相互干扰和破坏，必须提供保护功能。 地址重定位(1)逻辑地址空间(2)物理地址空间(3)地址重定位(4)重定位类型 地址重定位分为静态重定位和动态重定位两类。把作业在装入过程中随即进行的地址 变换方式，称为 静态重定位。在作业执行过程中，当访问内存单元时才进行的地址变换方 式，称为 动态重定位。动态重定位是在程序执行过程中由硬件地址变换机构实现的。 动态重定位的主要优点如下:用户作业在执行过程中，可以动态申请存储空间和在内 存中移动;有利于程序段的共享。 链接 (1)静态链接。 (2)装入时动态链接。 (3)运行时动态链接。 3.1.2 交换与覆盖覆盖指一个作业的某些程序段，或几个作业的某些部分轮流使用某一段存储空间。交换实质上是使用外存做缓冲，让用户程序在较小的存储空间中通过不断地换出换入 而可以运行较大的作业。交换可以是进程的整体交换，称为“进程交换”。如果交换以进程的部分页面或段为单位进行，则分别称之为“页面交换”或“分段交换”，又统称为“部分交换”。这种交换方法是实现请求分页及请求分段式存储管理的基础，虚拟存储系统就是采 用了这种部分交换而得以实现。 1.3 存储分配方式1.静态分配 在装配程序把目标模块进行链接装入时确定它们在内存中的位置。 2.动态分配其执行过程中可根据需要申请附加的存储空间。 1.4 连续分配管理方式固定式和可变式分区存储管理 (1)固定式分区存储管理(2)可变分区存储管理: 根据作业的实际需要动态地划分存储空间。(3)分配算法首次适应算法(First Fit) 下次适应算法(Next Fit)最佳适应算法(Best Fit)最坏适应算法(Worst Fit) 采用“内存紧缩”技术，可以把碎片集中起来形成一个大的空闲区。 分区的存储保护(1)界地址保护: 界地址保护又称为界限寄存器保护。 界限寄存器方式: 下界寄存器存放起始地址，上界寄存器存放结束地址。基址寄存器和限长寄存器: 基址寄存器存放起始地址，限长寄存器存放最大长度。(2)存储键保护: 同一作业的各页面所对应的内存块都要指定一个相同的，但又不与 其他作业相重的键码。这个键码存于快速寄存器和该作业的程序状态字 PSW 中，当程序要 访问某一块时，将程序状态字中的键码与被访问块的键码进行比较，若相符，则表明允许 本次访问，否则发出越界中断。 1.5 非连续分配管理方式简单分页存储管理分页存储管理技术中的基本作法是:(1)等分内存: 把内存划分成大小相等的单位，称为存储块，或称为页框(Page Frame)。(2)用户逻辑地址空间的分页: 把用户的逻辑地址空间划分成若干个与存储块大小相 等的单位，称之为页面或页(Page)。并给各页从起始开始依次编以连续的页号 0，1，2，……。(3)逻辑地址的表示: 用户的逻辑地址从基地址“0”开始连续编址，即相对地址。(4)内存分配原则: 系统以存储块为单位把内存分给作业或进程。(5)页表和页表地址寄存器: 作业的一页可以分配到内存空间中任何一个可用的存储 块。简单分页管理方法在作业或进程开始执行之前，把该作业或进程的程序段和数据全部 装入内存的各个空闲块中，并通过页表和硬件地址变换机构实现虚拟地址到内存物理地址 的地址映射。(6)快表(7)页的共享与保护: 保护的项目一般有读、写、运行等。 分段存储管理段式存储管理按用户作业中的自然段来划分逻辑空间，例如代码段，数据段，堆 栈段等等。每段占用连续的地址空间，因此作业的逻辑地址是二维的，由段号和段内地址 组成。(1)把程序按内容或过程(函数)关系分成段，每段有自己的名字。 (2)地址转换。(3)段的共享与保护。(4)分段存储管理特点:优点是便于程序模块化处理和便于处理变换的数据结构;便于动态链接;便于共享分段;可以实现虚拟存储器，使作业的地址空间不受内存容量的 限制。","link":"/2016/03/19/技术/01|操作系统/01-技术-01-操作系统-03-进程管理-01内存管理基础/"},{"title":"01 CS | 01 操作系统 |  04 文件管理  | 01 文件系统基础","text":"1.1 文件的概念1.文件定义文件是具有符号名的一组信息的集合。 2.文件属性文件的属性是指与文件记录的数据相关的所有相关信息，包括:基本信息: 文件名，文件别名，文件类型等;存储地址信息: 文件物理位置，文件长 度;文件访问控制信息: 文件的创建者，所有者，许可那些用户能够读写或运行;文件使用信息: 文件创建的时间日期，最近的使用日期时间等。 3.文件操作对文件操作有创建文件、读文件、写文件、截断文件、设置文件的访问位置等。 对记录的操作有插入记录、修改记录、删除记录、检索记录等。 4.1.2 文件结构·1.文件逻辑结构 文件逻辑结构指用户概念中的文件，独立于物理结构，又称逻辑文件。一般常用的文件其结构主要分为如下三类: (1)无结构文件:把文件看作是命名了相关联的字符流集合，或称流式文件。(2)累积文件:文件体为无结构记录序列，通过特定分隔符来划分记录，各记录大小 和组成可变。新记录总是添加到文件末尾。 (3)索引文件:记录大小不必相同，不必排序，存放在主文件中。索引文件主文件不 排序。另外建立索引，每个索引项指向一个记录，索引项按照记录中的某个关键字域排序。 2.文件物理结构文件物理结构是指文件在存储介质上的组织方式，它依赖于物理的存储设备，又称物 理文件。常用的文件物理结构有: (1)顺序结构: 是把一个逻辑上连续的记录构成的文件分配到连续的物理块中。 (2)链接结构: 把文件信息存放在非连续的物理块中，每个物理块均设有一个指针指 向其后续连续的另一个物理块，从而使得存放同一文件的物理块链接成一个串联队列。链 接方式又分为显式链接和隐式链接。显式链接的链接指针在专门的链接表中，隐式链接的 指针在存放文件信息的物理块中。(3)索引结构: 指为每个文件建立一个索引表，其中每一个表项指出文件记录所在的 物理块号，表项按逻辑记录编写，顺序或按记录内某一关键字顺序排列，对于大文件，为 检索方便，可以建立多级索引，还可以把文件索引表也作为一个文件，称为索引表文件。多重索引结构(混合索引结构)采用了间接索引方式，第一级索引表的表项指出下一 级索引表的位置(物理块号)，下一级索引表的表项指出再下一级索引表的位置，这样间接 几级，最末—级索引表的表项则指向相应记录所在的物理块号。 4.1.3 目录结构为实现“按名存取”，必须建立文件名与外存空间中的物理地址的对应关系，体现这种 对应关系的数据结构称为目录。 1.文件目录管理基本要求实现“按名存取”:用户只需提供文件名，即可对文件进行存取，这是目录管理基本功 能。实现文件共享:允许不同的用户使用同一个文件。 允许文件重名:采用多级目录。 2.文件组成文件包含两部分内容:文件说明(或称文件头)与文件体。文件体是文件本身的信息，可能是记录式文件或是字符流式文件。文件说明就是文件控制块。目录是由一组文件的文 件说明(即文件控制块 FCB)组成的文件，它本身也是一种文件。 3.文件控制块(FCB)组成 (1)基本信息类: 文件名、文件外存地址、文件逻辑结构、文件物理结构。 (2)存储控制信息类: 文件拥有者的权限、核准用户的权限、一般用户的权限。(3)使用信息类: 文件建立的日期与时间，上一次修改的日期与时间、当前的使用信息。 4.文件目录组织形式(1)单级目录结构(2)二级目录结构(3)多级目录结构 多级目录由称为树形目录，将文件的多级目录结构以图形化表示，即是图形化目录。 1.4 文件共享 文件共享是指在不同用户之间共同使用某些文件。实现文件共享主要有三种方式:(1)绕道法(软链接法): 路径名是由当前目录到信息文件通路上所有各级目录的目 录名加上该信息文件的符号名组成。(2)链接法(硬链接法): 即一个目录中的一个表项直接指向被共享文件所在的目录 表项，而不是直接指向文件。(3)基本目录表方法基本文件目录和符号文件目录结构是把所有文件目录的内容分成两部分:一部分包括 文件的结构信息、物理块号、存取控制和管理信息等文件说明，并用文件系统赋予的唯一 的内部标识符来标识;另一部分包括符号文件名和系统赋予的该文件的内部标识符组成。 这两部分分别称为基本文件目录表(BFD)和符号文件目录表(SFD)。 4.1.5 文件保护1.访问类型通过限制可进行的文件访问类型，保护机制可提供控制访问(特别地为防止文件被破 坏，一般对写和修改操作需要特别控制)。访问类型有:读;写;修改;运行;添加;删除;列表清单。 2.访问控制解决文件保护问题最为常用的是根据用户身份进行控制。实现基于身份访问的最普通方法是为每个文件或目录增加一个访问控制列表。所有用户组对文件权限的集合形成了一 个二维表即文件访问控制表，不同用户对同一文件或目录需要不同类型的访问。 3.文件系统安全为了尽量减少在系统发生故障时文件信息破坏，最简便的措施是为重要的文件保存多 个副本，即“定期转储”，当系统出现故障，就可以装入转储的文件来恢复文件系统。(1)全量转储: 把文件存储器中的全部文件定期(例，每周、每天)复制到备份磁带 上。(2)增量转储: 全量转储只能恢复上次转储时的状态。","link":"/2016/03/25/技术/01|操作系统/01-技术-01-操作系统-04-文件管理-01文件系统基础/"},{"title":"01 CS | 01 操作系统 | 01 操作系统引论","text":"一、操作系统的概念、特征、功能和提供的服务1.1操作系统的概念操作系统是计算机系统中最重要、最基本的系统软件，操作系统位于硬件和用户程序之间。 1.它能向 **用户提供使用计算机的接口**; 2.它 **能管理计算机软硬件资源，提高其利用率**; 3.利用 **虚拟技术，扩展了计算机的功能和使用范围**。 因此，操作系统的定义为: 控制和管理计算机软、硬件资源，以尽可能合理、高效的方法为不同用户及其应用程序提供服务的一种系统程序。 1.2 操作系统的特征操作系统具有 **并发、共享、虚拟和不确定性**，四大特征。 其中，最重要的是 **并发** 特征， 其他三个特征都是以并发为前提的。 (1). 并发。在一段时间内，有多道程序在宏观上同时执行，多道程序设计导致多个程 序并发执行。(2). 共享。多道程序或者多个用户作业共享有有限的计算机系统资源。(3). 虚拟。把物理上的一个变成逻辑上的多个或扩大容量。(4). 异步。在OS控制下的多个作业的执行顺序和每个作业的执行顺序时间是不确定的。～异步性不是指 OS 本身的功能不确定或用户程序的结果不确定～。程序的并发执行，使得程序执行的时间顺序不确定，但是程序执行的结果却是一定的。 1.3 操作系统的功能操作系统主要有 **进程管理、存储管理、文件管理、输入/输出管理和作业管理** 五大功能。 1.4 操作系统所能提供的服务**1.命令输入** （提供人机对话平台）。 **2.系统调用服务** （提供编程时的系统服务）。 二、操作系统的发展与分类2.1 操作系统的发展大型计算机、巨型计算机需要满足其 **集群计算** ，**高性能计算** 的需求; 军用计算机、工业控制计算机希望操作系统能 **实时响应**; 嵌入 式计算机要求 **精简、功能专一** ; 便携式设备要求 **省电，电池持续耐力强** 等等。 操作系统将会随着用户对系统不断的新要求，在硬件的支持下，得到更加快速、强大地发展。 2.2 操作系统的分类1.单用户操作系统2.批处理操作系统 (1)单道批处理系统 (2)多道批处理系统3.分时操作系统4.实时系统5.网络操作系统6.分布式操作系统 7.并行操作系统 三、操作系统的运行环境3.1 内核态与用户态内核态 一般指操作系统管理程序运 行的状态，具有较高的特权级别，又称为特权态、系统态或管态;用户态 一般指用户程序运 行时的状态，具有较低的特权级别，又称为普通态、目态。 3.2 中断、异常**中断(interrupt)** 是指处理机对系统中或系统外发生的异步事件的响应。 **异常(有 时也称为陷阱 trap)** 是指由系统发起的一次确定的服务过程。 区别与联系 :就比较通用的观点来看，中断是 ~强迫性~ 的，异常是 ~自愿性~ 的; ~中断一般外来的，异常是程序发出的，中断服务于所有程序，异常一般为发出异常的 程序服务。~ 3.3 系统调用处理过程1. 当系统调用发生时，处理器通过一种特殊的机制，通常是中断或者异常处理，把控制流程转移到监控程序内的一些特定的位置。同时，处理器模式转变成特权模式。 2. 其次，由监控程序执行被请求的功能代码。这个功能代码代表着对一段标准程序段的执行，用以完成所请求的功能。 3. 第三，处理结束之后，监控程序恢复系统调用之前的现场;把运行模式从特权模式恢复成为用户方式; 4. 最后将控制权转移回原来的用户程序。 系统调用与一般程序调用的不同:(1) 运行在不同的系统状态 。调用的程序是运行在 用户态 ，被调用的程序运行在 系统态 。(2) 进入的方式不同 。过程调用语句直接跳转到被调用过程;而系统调用则必须通过运行系统调用命令。(3) 返回方式不同 。过程调用直接返回;系统调用则不直接返回，有重新调度过程。(4) 代码层次不同 。过程调用是用户级程序，而系统调用是系统级程序。(5) 系统调用一般不能嵌套或递归 。 四、操作系统体系结构1.整体式结构首先确定操作系统的总体功能 然后将总功能分解为若干个子功能，实现每个子功能的程序称为模块。 主要优点是: 结构紧密，接口简单直接，系统效率较高。 2.层次式结构把操作系统的所有功能模块，按功能流图的调用次序， 分别将这些模块排列成若干层，各层之间的模块只能是单向依赖或单向调用关系。 这样不但操作系统的 结构清晰，而且 不构成循环。 3.微内核(客户/服务器)结构提供所有操作系统基本都具有的那些操作 如线程调度、虚拟存储、消息传递、设备驱动以及内核的原语操作集和中断处理等。 这些部分通常采用层次结构并构成了基本操作系统。","link":"/2016/03/04/技术/01|操作系统/01技术-01操作系统-01操作系统引论/"},{"title":"01 CS  | 02 计算机网络 |  01计算机网络体系结构 ","text":"1计算机网络概述 1.1计算机网络的概念、组成与功能 计算机网络: 就是利用通信设备和线路将地理位置不同的、功能独立的多个计算机系统互连起来，以功能完善的网络软件(即网络通信协议、信息交换方式、网络操作系统等)实现网络中资源共享和信息传递的系统。 1.2计算机网络的分类1. 环形结构2. 总线结构3. 网状结构 1.3计算机网络的标准化工作及相关组织 国际上制定通信协议和标准的主要组织有以下几个:(1)IEEE:(2)ISO:(3)ITU 2计算机网络体系结构与参考模型2.1计算机网络分层结构对于非常复杂的计算机网络协议，最好的方法是采用分层式结构。每一层关注和解决通信中的某 一方面的规则。各层之间是独立的，灵活性好，结构上可以分开，易于实现和维护，促进标准化工作。 2.2计算机网络协议、接口、服务等概念1.协议 协议总是指某一层协议，准确地说，它是对同等实体之间的通信制定的有关通信规则约定的集合。网络协议的三个要素:(1)语义(Semantics)。(2)语法(Syntax)。(3)同步即定时(Timing)。 2 接口(服务访问点)同一系统中相邻两层的实体进行交互的地方。3.服务(service) 为保证上层对等体之间能相互通信，下层向上层提供的功能。 2.3 ISO/OSI参考模型和 TCP/IP**模型1.ISO/OSI 参考模型** 各节点有相同的层次。 同一节点的相邻层之间通过接口通信。 下层为上层服务。图1[image:B22A6F0A-8269-42A1-A362-E66EF2FC2DA3-1171-00003908EFD3EB98/F31A3E4B-9901-45AD-BA2F-07C3CEA05D8D.png] 1、物理层物理层是 OSI 参考模型的最低一层，也是在同级层之间直接进行信息交换的唯一一层。物理层负责 传输二进制位流，它的任务就是为上层(数据链路层)提供一个物理连接，以便在相邻节点之间无差错地 传送二进制位流。 有一点应该注意的是，传送二进制位流的传输介质，如双绞线、同轴电缆以及光纤等并不属于物理层 要考虑的问题。实际上传输介质并不在 OSI 的 7 个层次之内。 · 电气特性: 电缆上什么样的电压表示 1 或 0· 机械特性: 接口所用的接线器的形状和尺寸· 过程特性:不同功能的各种可能事件的出现顺序以及各信号线的工作原理· 功能特性:某条线上出现的某一电平的电压表示何种意义 2、数据链路层数据链路层负责在两个相邻节点之间，无差错地传送以 “ 帧 ” 为单位的数据。每一帧包括一定数 量的数据和若干控制信息。 数据链路的任务首先要负责建立、维持和释放数据链路的连接。在传送数据时，如果接收节点发现数据有错，要通知发送方重发这一帧，直到这一帧正确无误地送到为止。这样，数据链路层就把一条可能出错的链路，转变成让网络层看起来就像是一条不出错的理想链路。 3、网络层网络层的 主要功能 是为处在不同网络系统中的两个节点设备通信提供一条逻辑通路。其基本任务 包括 路由选择、拥塞控制与网络互联等功能。 4、传输层传输层的 主要任务 是向用户提供可靠的端到端( end-to-end )服务，透明地传送报文。它向高层屏蔽 了下层数据通信的细节，因而是计算机通信体系结构中最关键的一层。该层关心的主要问题包括建立、维 护和中断虚电路、传输差错校验和恢复以及信息流量控制机制等。 5、会话层负责通讯的双方在正式开始传输前的沟通，目的在于建立传输时所遵循的规则，使传输更顺畅、有效 率。沟通的议题包括:使用全双工模式或半双式模式?如何发起传输?如何结束传输?如何设置传输参数 就像两国元首在见面会晤之前，总会先派人谈好议事规则，正式谈判时就根据这套规则进行一样。 6、表示层表示层处理两个应用实体之间进行数据交换的语法问题，解决数据交换中存在的数据格式不一致以及 数据表示方法不同等问题。例如， IBM 系统的用户使用 EBCD 编码，而其它用户使用 ASCII 编码。表 示层必须提供这两编码的转换服务。数据加密与解密、数据压缩与恢复等也都是表示层提供的服务。 、应用层应用层是 OSI 参考模型中最靠近用户的一层，它直接提供文件传输、电子邮件、网页浏览等服务给 用户。 图2[image:B3CF0BE2-FB01-4B53-A9A2-FCBB15E58215-1171-00003911E2F9E019/E86A77A8-EB49-427A-8FDB-9B4E5D1EB1DE.png] 2.TCP/IP 模型图3 [image:BD011852-95EF-45C3-B180-3442AE80FFBA-1171-00003917BA27AD02/341D3EB8-2D6B-4F50-9739-C809BF322004.png] 1、网络接口层( network interface layer )**在 TCP/IP 分层体系结构中，最底层是网络接口层，它 负责通过网络发送和接收 IP 数据报 。TCP/IP 体系结构并未对网络接口层使用权的协议做出强硬的规定，它允许主机连入网络时使用多种现成的和流行 的协议，例如局域网协议或其他一些协议。帧 是 独立的网络信息传输单元 。 2、网络层( internet layer )网际层是 TCP/IP 体系结构的第二层，它实现的功能相当于 OSI 参考模型网络层的无连接网络服务。互联层负责将源主机的报文分组发送到目的的主机，源主机与目的主机可以在一个网上，也可以在不同的网上。( 1 )处理来自传输层的分组发送请求。在收到分组发送请求之后，将分组装入 IP 数据报，填充报 头，选择发送路径，然后将数据报发送到相应的网络输出线。( 2 )处理接收的数据报。在接收到其他主机发送的数据报之后，检查目的地址，如需要转发，则 选择发送路径，转发出去;如目的地址为本节点 IP 地址，则除去报头，将分组送交给传输层处理。( 3 )处理互联的路径、流控与拥塞问题。 3、传输层( transport layer )网际层之上是传输层，它的主要功能是负责应用进程之间的 端 - 端( Host-to-host )通信。在 TCP/IP体系结构中，设计传输层的主要目的是在互联网中源主机与目的主机的对等实体之间建立用于 会话的端 - 端连接 。因此，它与 OSI 参考模型的传输层功能相似。TCP/IP 体系结构的传输层定义了 传输控制协议( TCP ， transport control protocol ) 和 用户数据 报协议( UDP,user datagram protocol ) 两种协议。TCP 协议是一种可靠的面向连接的协议，它允许将一台主机的字节流( byte stream )无差错地传送到目的主机。UDP 协议是一种不可靠的无连接协议，它主要用于不要求分组顺序到达的传输中，分组传输顺序检查与排序由应用层完成。 4、应用层( application layer )在 TCP/IP 体系结构中，应用层是最靠近用户的一层。它包括了所有的高层协议，并且总是不断有新的协议加入。其 主要协议 包括:( 1 )文件传输协议( FTP ,file transfer protocol )，用于实现互联网中交互式文件传输功能;( 2 )简单邮件传输协议( SMTP simple mail transfer protocol )，用于实现互联网中邮件传送功能; ( 3 )域名系统( DNS, domain name system )，用于实现互联网设备名字到 IP 地址映射的网络服务;( 4 )超文本传输协议( HTTP, byper text transfer protocol )，用于目前广泛使用的 Web 服务;( 5 )路由信息协议( RIP, routing information protocol )，用于网络设备之间交换路由信息;","link":"/2016/04/17/技术/02|计算机网络原理/01-CS-02-计算机网络-01计算机网络体系结构/"},{"title":"01 CS | 03 计算机组成 | 02 计算机的发展及应用","text":"","link":"/2016/05/19/技术/03|计算机组成/01-CS-03-计算机组成-02-计算机的发展及应用/"},{"title":"01 CS | 03 计算机组成 | 01 计算机系统概论","text":"第一章 计算机系统概论 计算机的硬件：计算机中的电子电路和物理装置；计算机硬件的五大部分：运算器、控制器、存储器、输入设备和输出设备；计算机的软件：计算机运行所需的程序及相关的资料；软件系统：一台计算机中的全部程序的集合；计算机软件的分类（按功能划分）：应用软件和系统软件；系统软件：用于实现计算机系统的管理、调度、监视和服务等功能的软件；应用软件：用户为解决某种应用问题而编制的程序；指令和数据的区分：指令和数据都存储在存储器中，用不同的时间段来划分，取指周期取出的为指令，执行周期取出的为数据。还可以由地址来源划分，有PC(程序计数器)所指的存储单元取出的是指令，由IR(指令寄存器)指令地址所指存储单元取出的是操作数。机器指令：计算机能全部识别并执行的指令；指令系统：计算机全部指令的集合； 英文代号解释： CPU：Central Processing Unit，中央处理机（器），是计算机硬件的核心部件，主要由运算器和控制器组成；PC：Program Counter，程序计数器，其功能是存放当前欲执行指令的地址，并可自动计数形成下一条指令地址；IR：Instruction Register，指令寄存器，其功能是存放当前正在执行的指令。CU：Control Unit，控制单元（部件），为控制器的核心部件，其功能是产生微操作命令序列。ALU：Arithmetic Logic Unit，算术逻辑运算单元，为运算器的核心部件，其功能是进行算术、逻辑运算。ACC：Accumulator，累加器，是运算器中既能存放运算前的操作数，又能存放运算结果的寄存器。MQ：Multiplier-Quotient Register，乘商寄存器，乘法运算时存放乘数、除法时存放商的寄存器。X：此字母没有专指的缩写含义，可以用作任一部件名，在此表示操作数寄存器，即运算器中工作寄存器之一，用来存放操作数；MAR：Memory Address Register，存储器地址寄存器，在主存中用来存放欲访问的存储单元的地址。MDR : Memory Data Register,存储器数据缓冲寄存器，在主存中用来存放从某单元读出、或者要写入某存储单元的数据。I/O:Input/Output equipment,输入/输出设备，为输入设备和输出设备的总称，用于计算机内部和外界信息的转换和传送；MIPS:Million Instruction Per Second,每秒执行百万条指令数，为计算机运算速度指标的一种计量单位。CPI : Cycle Per Instruction,执行一条指令所需时钟的周期数，计算机运算速度指标计量单位之一；FLOPS:Floating Point Operation Per Second,每秒浮点运算次数，计算机运算速度计量单位之一。存储器：MAR：地址寄存器；MDR：数据寄存器；运算器：ALU：算术逻辑运算单元；ACC：累加器；MQ：乘商寄存器；X：操作数寄存器；控制寄存器：PC：程序计数器；IR：指令寄存器；CU：控制单元。","link":"/2016/05/18/技术/03|计算机组成/01-CS-03-计算机组成-01-计算机系统概论/"},{"title":"01 CS | 03 计算机组成 | 03 2  计算机的发展及应用","text":"计算机系统的五大部件之间的互连方式有两种：1、各部件之间使用单独的连线，称为分散连接；2、将各部件连接到一组公共信息传输线上，称为总线连接。由于一开始分散连接都需要经过运算器，使CPU负载过大，严重影响CPU的正常使用（工作效率），后来改为存储器为中心采用DMA和中断技术，使CPU效率得到很大的提升。随着技术的进步人们的需求的逐渐扩大，需要的I/O设备日益增多，分散连接已无法满足，由此出现总线连接的方式。总线连接：连接多个部件的信息传输线，是各部件共享的传输物质。下面就是介绍总线连接。总线：是计算机系统中的各部件之间进行信息传输的公共通道；(即：多个部件共享传输部件)总线传输特点：某一时刻只能有一路信息在总线上传输，即：分时使用。三态驱动缓冲电路(总线部件大多配有，意义：减轻总线上的负载)：该电路的输出状态分为，高电平、低电平、高阻。总线按照传送信息分类：数据总线、地址总线、控制总线(用来发出各种控制信息的传输线注：单向传输)；总线的控制方法：1、总线控制逻辑基本集中在一起，称为集中式；2、总线控制逻辑分散在总线上各个部件的，称为分散式。系统总线的集中控制优先权仲裁的三种方式(总线判优控制：为解决多个部件同时申请总线时的使用权分配问题);1、链式查询；(连接简单，易于扩充，对电路最敏感。) 注：BS(总线忙)1条、BR(总线请求)1条、BG(总线响应)1条2、计数器查询；(优先级设置比较灵活，对故障不敏感，连线及控制部分过程比较复杂。) 注：计数器总线log2 N条、BR(总线请求)1条、BG(总线忙)1条3、独立请求；(请求方式速度最快，但硬件用量大，连线多，故成本高。) 注：BS(总线忙)1条、BR(总线请求)N条、BG(总线响应)N条RS-232串行传送的一帧为：1位起始位、5-8位数据位、0-1位校验位、1-2位终止位。起始位位低电平有效，终止位为高电平有效。信息传送的方式有：串行传送、并行传送、并串行传送、分时传送；常用的微机总线有：ISA总线、EISA总线、MCA总线、PCI总线。总线宽度：指数据总线的根数，用bit做单位；总线带宽：指总线在单位时间内可以传输的数据总量，相当于总线的数据传输率，等于总线工作频率与总线宽度(转换为字节)的乘积； （通常用每秒传输信息的字节数来衡量，单位可用：MBps(兆字节每秒)）总线复用：一条信号线上分时传送两种信号。（也就是说两种不同性质且不同时出现的信号分时使用同一组总线）总线的主设备：指一次总线传输期间，拥有总线控制权的设备；总线的从设备：指一次总线传输期间，配合主设备完成数据传输的设备，它只能被动接受主设备发来的命令；总线的传输周期： 指总线完成一次完整可靠的传输所需要的时间；总线的通信控制：指总线传送过程中双方的时间配合方式。同步通信和异步通信的区别；同步通信，由统一的时钟控制，控制方式简单，灵活性差，当系统中的各部件工作速度差异大的时候，总线工作效率明显下降，适用于差别不大的场合；异步通信，指没有统一时钟控制的通信，部件之间采用应答方式进行联系，控制方式较同步方式，灵活性高，当系统中各部件工作速度差异大的时候，有利于提高总线工作效率。半同步通信。半同步通信同时保留了同步通信和异步通信的特点：半同步通信既能像同步通信那样有统一时钟控制,又能像异步通信那样允许传输时间不一致，一次工作效率也介于两者之间。设置总线标准设置的原因：总线标准的设置主要解决不同厂家各类模块化产品的兼容问题；plug and play:即插即用。EISA/PCI等具有此功能。若想要提高总线的数据传输率，可提高总线的时钟频率，或减少总线周期中的时钟个数，或增加总线宽度。注意：比特率和波特率的运算。波特率是全部传送的信息，而比特率是有价值的数据位信息。","link":"/2016/05/23/技术/03|计算机组成/01-CS-03-计算机组成-03-2-计算机的发展及应用/"},{"title":"01 CS | 03 计算机组成 | 06 计算机的运算方法","text":"浮点数的位数采用补码的时候，其符号位与第一数位不同的为规格化数；两补码相加，采用一位符号位，若最高位进位或次高位进位异或结果为1的时候，表示结果溢出。采用双符号位，则结果的双符号位不同时，表示结果溢出；浮点数由阶码和尾数组成，阶码一般用补码、移码表示，尾数一般用原码、补码表示；规格化补码的规定：IEEE754的阶码为8为的移码，尾数为原码；机器字长：CPU一次能处理数据的位数，通常与CPU的寄存器位数有关；机器字长直接影响加法器位数、数据总线宽度和存储字长，一般加法器位数、数据总线宽度和存储字长与机器字长一致；74LS181是片内先行进位的4位ALU电路，其4位进位是同时产生的。多片74LS181级连，进行组内并行、组间串行；即组内先行进位，组间串行进位。与74LS182配合，进位是组内并行，组间并行；即组内先行进位，组间先行进位；","link":"/2016/06/03/技术/03|计算机组成/01-CS-03-计算机组成-06-计算机的运算方法/"},{"title":"01 CS | 03 计算机组成 | 05 输入输出系统","text":"I/O接口：主机与I/O设备之间设置的一个硬件电路及相应的软件控制；输入设备：把现实的信息形式变换为计算机能接受并识别信息形式的设备；输出设备：将计算机处理过的二进制代码信息，转换为人们能识别信息形式的设备；I/O端口的统一编制方式：将I/O端口地址看作是内存单元地址的一部分。特点：I/O地址占用了存储空间，减少了主存的容量，访问I/O使用访问主存的专用指令；I/O端口的不统一（即独立）编制方式：I/O端口地址与内存单元的地址是分开的，有各自独立的存储空间。特点：不影响主存容量，访问I/O时使用专用指令；I/O的控制方式有：程序查询方式、程序中断方式、直接存储器存取方式(DMA);I/O设备与主机采用程序查询方式交换信息，CPU与设备处于串行工作状态；程序中断方式，CPU与设备并行工作；中断：计算机在执行程序的过程中，当出现异常情况或特殊情况时，计算机停止现行程序的运行，转向对这些异常或特殊请求的处理，处理结束后，再返回到现行程序的间断处继续执行源程序，这个过程就叫做中断；中断识别的方法有：程序查询法、硬件查询法、独立请求法；I/O设备的中断传输方式可以做到实时响应，但大批量传输数据时，中断次数过于频繁，效率受到影响；DMAC与CPU同时访问主存所引起主存使用权冲突的处理方法有：停止CPU使用主存法、DMAC与CPU交替使用主存法、周期挪用发；在采用DMA方式的I/O系统中，其基本思想主要是主存与外存设备之间建立直接的数据通道；","link":"/2016/05/30/技术/03|计算机组成/01-CS-03-计算机组成-05-输入输出系统/"},{"title":"01 CS | 03 计算机组成 | 04 存储器","text":"存储单元：由若干个存储位组成 的一个存储字节或存储字；存储容量：存储器中存储二进制代码的总位数；存储器的分类按照存储介质划分：1、半导体存储器；2、磁表面存储器；3、磁芯存储器；4、光盘存储器；按照存取方式划分：1、随机存储器；2、只读存储器；3、串行访问存储器；按照在计算机中的作用分类：就是常见的主存储器、辅助存储器、缓存存储器。主存储器：随机存储器RAM(静态RAM和动态RAM)、只读存储器ROM(MROM/PROM/EPROM/EEPROM)；辅存：磁盘、磁带、光盘。缓存（Cache）.存储器的层次结构：寄存器、缓存、主存、磁盘、磁带。存储器层级结构主要体现在缓存-主存和主存-辅存这两个存储上。主存储器相关算法。存储容量=存储单元个数存储字长存储容量(字节)=存储单元个数存储字长/8存储周期=存储时间+恢复时间RAM动态刷新：集中刷新、分散刷新、异步刷新；随机存取存储器分为：静态RAM和动态RAM;静态RAM电路：1、静态RAM基本单元电路；2、静态RAM芯片；3、静态RAM读/写时序。动态RAM电路：1、动态RAM的基本单元电路；2、动态RAM芯片；3、动态RAM时序；4、动态RAM的刷新动态RAM时序：1、读时序；2、写时序；动态RAM与静态RAM的比较动态RAM的优势：1、在同样大小的芯片中，，动态RAM的集成度远远高于静态RAM的集成度；2、动态RAM减少了芯片的引脚，封装尺寸也相应的减少；3、动态RAM的功耗比静态RAM要小；4、动态RAM的价格比静态RAM的价格便宜；动态RAM的缺点：1、动态原件（电容），比静态RAM低；2、动态RAM需要再生，故需配置再生电路，也需要消耗一部分的功率。随机存储器：可随机存取任一单元，存取时间基本固定，与存储单元地主无关的存储器；只读存储器(ROM)：存储器中的内容一旦写入就不能改变，只能读出的存储器；EPROM：紫外线擦除、电写入的只读存储器；EEPROM：电擦除、电写入的只读存储器；组成主存时使用ROM和RAM；(ROM和RAM的区别)RAM是随机存储内存；ROM是只读内存。使用存储芯片组成存储器时，有3中方法：位扩展法、字扩展法、字位扩展法（既增加存储字的数量、又增加存储字长）程序访问的局限性是使用高速缓存Cache的依据；Cache：为解决CPU与主存速度差距较大的问题，在CPU与主存之间插入的速度高、位价高、容量小的存储器。采用Cache的目的：提高CPU访问主存的速度，不能扩大主存的容量；Cache访问的命中：要访问的内存单元在Cache中，Cache的全部功能由硬件实现；Cache的地址映射方法：直接、全相连、组相连；Cache的替换算法：FIFO（先进先出）算法；LRU（近期最少使用）算法 、随机法；Cache的写策略：写回发、写直达法。（写直达法的一致性更好）；统一缓存：指令和数据都放在同一个缓存内的高速缓冲存储器；分立缓存：指令和数据放在独立的两个高速缓冲存储器中；三级存储系统：Cache、主存和辅存；一个存储单元有许多单个存储二进制位的存储元构成，存储字长：一个存储单元存储的二进制位个数；一个存储单元可包含1或者多个字节；磁盘存储器的平均存取时间是平均找道时间加上平均等待时间；CPU只能直接访问主存而不能直接访问外存。光盘不能采用随机存储方式来访问；","link":"/2016/05/28/技术/03|计算机组成/01-CS-03-计算机组成-04-存储器/"},{"title":"01 CS | 03 计算机组成 | 08 CPU的结构和功能","text":"PC：程序计数器，涌来存放现行指令的地址，通常具有计数功能，当遇到转移指令是，PC的值可被修改；IR：指令寄存器，存放当前要执行的指令；MDR ：存储器数据寄存器，功能是存放CPU与存储器要交换的数据；MAR ：存储器地址寄存器，功能是存放CPU要访问的存储器的地址；指令周期一般有3部分组成：取指周期、译码周期和执行周期；CPU是按照指令（和译码）、执行指令周而复始运行的；中断源：引起中断的各个因素；中断优先级：多个终端同时发生时，对各个中断源响应的先后次序；中断分为内部中断和外部中断、可屏蔽中断和非可屏蔽中断、软中断和硬中断；中断嵌套：高优先级的中断打断优先级的中断服务；中断的处理过程是：中断响应、识别中断源、保护现场、中断服务、恢复现场、中断返回；中断类型号是通过数据总线传送的。中断向量地址是中断服务程序入口地址的指示器；保护现场包括：保护程序断电和保护CPU内部个寄存器的内容；寻找中断服务程序入口地址有两种方法：硬件向量法和软件查询法；CPU内部的允许中断触发器，其状态受软件的控制，1允许0禁止；","link":"/2016/06/14/技术/03|计算机组成/01-CS-03-计算机组成-08-CPU的结构和功能/"},{"title":"01 CS | 03 计算机组成 | 07 指令系统","text":"指令一般由两个字段构成：1、操作码字段；2、地址码字段；指令的操作码：每条指令中用于表示其操作性质的代码；操作码的长度：即二进制位数，有固定长度（定长）和可变长度（变长）两种，但一般都是字节的整数倍；指令中的地址码：表示操作数地址的代码；寻址方式：寻找指令所需数据地址的方式和寻找下一条指令地址的方式；寻址方式有两种：指令寻址和数据寻址；有4、3、2、1、0地址指令，执行时各需要访问存储器4、4、3、2、1次；一般情况下，各地址码长度相同，固定长度的操作码的位数有指令的条数决定；指令的寻址方式有顺序和跳跃两种方式、采用跳跃寻址方式，可以实现程序的条件转移和无条件转移；操作数寻址方式就是形成操作数有效地址的方法；常用的操作数寻址方式有：立即寻址、直接寻址、间接寻址、相对寻址、寄存器寻址、寄存器间接寻址、变址寻址和堆栈寻址等。各寻址方式的含义及应用；存储器堆栈中，需要一个堆栈指示器，它是CPU中的一个专用寄存器，他指定的主存单元就是堆栈的栈顶；相对寻址的基址是程序计数器的PC值；除立即寻址和寄存器寻址外，其他寻址方式中，操作数都是存放在主存单元中。操作数的有效地址的计算；CISC：复杂指令系统计算机；RISC：精简指令系统计算机；RISC的目标是减少指令数；","link":"/2016/06/10/技术/03|计算机组成/01-CS-03-计算机组成-07-指令系统/"},{"title":"01 CS | 03 计算机组成 | 09 控制单元的功能","text":"取指周期的操作：T0:PC-&gt;MAR,1-&gt;R.T1:M(MAR)-&gt;MDR,PC+1-&gt;PC.T2:MDR-&gt;IR,OP(IR)-&gt;ID间址操作：T0:Ad(IR)-&gt;MAR,1-&gt;RT1:M(MAR)-&gt;MDRT2:MDR-&gt;Ad(IR)执行周期的操作：完成由指令操作规定的动作，包括传送结果及记录状态信息；指令周期一般有4部分组成：取指周期、间址周期、执行周期、中断周期；指令周期：CPU从内存取出一条指令并执行该指令的时间称为指令周期，它常用若干个机器周期来表示；","link":"/2016/06/18/技术/03|计算机组成/01-CS-03-计算机组成-09-控制单元的功能/"},{"title":"01 CS | 03 计算机组成 | 10 控制单元","text":"通常控制器的设计分为组合逻辑设计和微程序设计两大类，相对应的控制器结构就有布线逻辑式和存储逻辑式；组合逻辑控制器：以使用最少原件和取得最高操作速度为设计目标，用产生专门固定时序控制信号的组合逻辑电路设计的控制器；微程序控制器：用存储逻辑替代组合逻辑，用类似程序设计的方法设计的控制器；微命令：打开或关闭控制之门的控制命令；微操作：由微命令控制的打开或者关闭控制门的操作；微指令：若干微命令的组合，能产生一组控制信号，控制执行相应一组微操作的指令。微周期：取出并执行一条微指令所需的时间；控制存储器：用于存放全部的指令的所有微程序的存储器。微程序存放在控制器存储器中；微命令的组合与编码方式有4种：直接译码方式、字段直接编码方式、字段间接编码方式、混合编码方式；字段直接编码方式中一个字段在任一时刻最多能同时提供1个微命令；微指令的格式有：水平型、垂直型；微指令寄存器：存放由控制存储器独处的一条微指令信息的寄存器；微指令的执行方式有：顺序执行的方式、重叠执行的方式；在微程序控制器中，一条机器指令对应一个微程序，N跳机器指令对应N+3个微程序。","link":"/2016/06/22/技术/03|计算机组成/01-CS-03-计算机组成-10-控制单元/"},{"title":"01 CS  | 02 计算机网络 |  02物理层 ","text":"1通信基础 1.1信道、信号、宽带、码元、波特、速率、信源与信宿等基本概念(1)信道: 向某一个方向传送信息的媒体。(2)数据: 信息的承载实体。(3)信号: 数据的电磁或电气表现。(4)带宽:媒介中信号可使用的最高频率和最低频率之差，或者说是频带的宽度;另一个定义是信 道中数据的传送速率。 (5)码元: 在使用时间域(简称时域)的波形表示数字信号时，代表不同离散数值的基本波形。(6)波特: 单位时间内传输的码元数。(7)比特率:单位时间内传输的比特数。(8)信息传播过程简单地描述为:信源→信道→信宿。 1.2奈奎斯特定理与香农定理奈奎斯特(Nyquist)无噪声下的码元速率极限值 B 与信道带宽 H 的关系: 最大数据传输率 B=2H (Baud)**奈奎斯特公式—无噪信道传输能力公式:C=2Hlog2N (bps)式中 H 为信道的带宽，即信道传输上、下限频率的差值，单位为 Hz;N 为一个码元所取的离散值个 数。香农公式—带噪信道容量公式:C=Hlog2(1+S/N) (bps)**式中 S 为信号功率，N 为噪声功率，S/N 为信 噪比，通常把信噪比表示成 10lg(S/N)分贝(dB)。 1.3**编码与调制最基本的二元制调制方法有以下几种:1)调幅(AM):2)调频(FM):3)调相(PM) : 模拟数据: 如果数据在某个时间取连续值,则称为模拟数据.例如温度和压力。数字数据:若数据取离散值，则称数字数据。例如文本信息、整数、二进制数字等。 信号: 是数据的电磁波或电编码。是数据的具体表示形式。 信道: 传输信息的必经之路称为“信道”，也称为传送电信号的一条道路。按照信道中 传输的信号分类，可把信道分为 模拟信道 和 数字信道 。调制 就是将基带数字信号的频谱变换为适合在模拟信道中传输的频谱。解调正好相反。所以，调制解调技术 用于模拟信道传输数字数据通信方式，而模拟信道传输模拟数据不需要调制解调技术。 1.4电路交换、报文交换与分组交换 数据经编码后在通信线路上进行传输，按数据传送技术划分，交换网络又可分为电路交换网、报文交 换网和分组交换网。 1电路交换(1)电路交换的三个过程1 电路建立:数据传输:电路拆除: 2 报文交换 报文交换方式的数据传输单位是报文，报文就是站点一次性要发送的数据块，其长度不限且可变。当一个站要发送报文时，它将一个目的地址附加到报文上，网络节点根据报文上的目的地址信息，把报文发送到下一个节点，一直逐个节点地转送到目的节点。每个节点在收到整个报文并检查无误后，就暂存这个报文，然后利用路由信息找出下一个节点的地址， 再把整个报文传送给下一个节点。因此，端与端之间无需先通过呼叫建立连接。 3.分组交换 分组交换是报文交换的一种改进，它将报文分成若干个分组，每个分组的长度有一个上限，有限长度的分组使得每个节点所需的存储能力降低了，分组可以存储到内存中，提高了交换速度。它适用于交互式通信，如终端与主机通信。 数据报和虚电路的比较如下:(1). 在传输方式上，虚电路服务在源、目的主机通信之前，应先建立一条虚电路，然 后才能进行通信，通信结束应将虚电路拆除。而数据报服务，网络层从运输层接收报文， 将其装上报头(源、目的地址等信息)后，作为一个独立的信息单位传送，不需建立和释 放连接，目标结点收到数据后也不需发送确认，因而是一种开销较小的通信方式。但发方 不能确切地知道对方是否准备好接收，是否正在忙碌，因而数据报服务的可靠性不是很高。(2). 关于全网地址:虚电路服务仅在源主机发出呼叫分组中需要填上源和目的主机的 全网地址，在数据传输阶段，都只需填上虚电路号。而数据报服务，由于每个数据报都单 独传送，因此在每个数据报中都必须具有源和目的主机的全网地址，以便网络结点根据所 带地址向目的主机转发。这对频繁的人—机交互通信每次都附上源、目的主机的全网地址 不仅是个负担，也降低了信道利用率。(3). 关于路由选择:虚电路服务沿途各结点只在呼叫请求分组在网中传输时，进行路 径选择，以后便不需要了。可是在数据报服务时，每个数据每经过一个网络结点都要进行 一次路由选择。当有一个很长的报文需要传输时，必须先把它分成若干个具有定长的分组， 若采用数据报服务，势必增加网络开销。(4). 关于分组顺序:对虚电路服务，由于从源主机发出的所有分组都是通过事先建立 好的一条虚电路进行传输，所以能保证分组按发送顺序到达目的主机。但是，当把一份长 报文分成若干个短的数据报时，由于它们被独立传送，可能各自通过不同的路径到达目的 主机，因而数据报服务不能保证这些数据报按序列到达目的主机。(5). 可靠性与适应性:虚电路服务在通信之前双方已进行过连接，而且每发完一定数 量的分组后，对方也都给予确认，故虚电路服务比数据报服务的可靠性高。但是，当传输 途中的某个结点或链路发生故障时，数据报服务可以绕开这些故障地区，而另选其他路径， 把数据传至目的地，而虚电路服务则必须重新建立虚电路才能进行通信。因此，数据报服 务的适应性比虚电路服务强。(6). 关于平衡网络流量:数据报在传输过程中，中继结点可为数据报选择一条流量较 小的路由，而避开流量较高的路由，因此数据报服务既平衡网络中的信息流量，又可使数 据报得以更迅速地传输。而在虚电路服务中，一旦虚电路建立后，中继结点是不能根据流 量情况来改变分组的传送路径的。 综上所述，虚电路服务适用于交互作用，不仅及时、传输较为可靠，而且网络开销小。 数据报服务适用于传输单个分组构成的、不具交互作用的信息以及对传输要求不高的场合。 虚电路服务和数据报服务的区别1 从占用通信子网资源方面看:虚电路服务将占用结点交换机的存储空间，而数据 报服务对每个 其完整的目标地址独立选径，如果传送大量短的分组，数据头部分远大于数 据部分，则会浪费带宽。 2 从时间开销方面看:虚电路服务有创建连接的时间开销，对传送小量的短分组， 显得很浪费;而数据报服务决定分组的去向过程很复杂，对每个分组都有分析时间的开销。 3 从拥塞避免方面看:虚电路服务因连接起来的资源可以预留下来，一旦分组到达， 所需的带宽和结点交换机的容量便已具有，因此有一些避免拥塞的优势。而数据报服务则很困难。 4 从健壮性方面看:通信线路的故障对虚电路服务是致命的因素，但对数据报服务则容易通过调整路由得到补偿。因此虚电路服务更脆弱。 2 传输介质2.1 双绞线、同轴电缆、光纤与无线传输介质并行传输 有以下特点:(1). 传输速度快，处理简单。(2). 传输成本比较高:每一位的传输都需要一个单独的信道支持，多位同时传输需要 多个独立信道的支持。(3). 不支持长距离传输:信道之间有电容感应，远距离传输时，可靠性较低。 串行通信 有以下特点:(1). 串行通信因而比并行通信慢很多，一次一位，传输速率低。(2). 通信成本较低，只需要一个信道。(3). 支持长距离传输，目前计算机网络中所使用的传输方式均为串行传输。 串行通信的频带利用率比并行通信要高。通常在串行通信中，为了进行数据流的匹配， 都要引入缓冲区。 2.2物理层接口的特性物理层的 主要任务 描述为确定与传输媒体的接口的一些特性，即:(1)机械特性:(2)电气特性:(3)功能特性:(4)过程特性: 3 物理层设备物理层设备既分不开冲突域，也分不开广播域。数据链路层设备可以分开冲突域，但仍然分不开广播域。 网络层以上(包括网络层)连接设备可以既可以分开冲突域，也可以分开广播域 3.1 中继器“5-4-3 规则”，是指在 10M 以太网中，网络总长度不得超过 5 个区段，4 台网络延长设备，且 5 个区段中只有 3 个区段可接网络设备。即:一个网段最多只能分 5 个子网段;一个网段最多只能有 4 个中继器;一个网段最多只能有三个子网段含有 PC。 3.2 集线器集线器属于典型的物理层设备，既不能分离冲突域，也不能分离广播域。故而，用集 线器连接的工作站集合属于同一个冲突域，也属于同一个广播域。","link":"/2016/04/27/技术/02|计算机网络原理/01-CS-02-计算机网络-02物理层/"}],"tags":[{"name":"计算机组成","slug":"计算机组成","link":"/tags/计算机组成/"},{"name":"操作系统","slug":"操作系统","link":"/tags/操作系统/"},{"name":"计算机网络","slug":"计算机网络","link":"/tags/计算机网络/"}],"categories":[]}